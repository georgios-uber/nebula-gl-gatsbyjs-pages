{"version":3,"sources":["webpack:///./node_modules/ocular-gatsby/src/templates/doc-n.jsx","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js"],"names":["query","replaceLinks","props","html","docBySlug","relativeLinks","pageContext","replace","link","href","hrefWithoutLeadingSlash","DocTemplate","_this","_React$Component","call","this","state","render","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","dangerouslySetInnerHTML","__html","React","Component","$export","__webpack_require__","toLength","context","$startsWith","P","F","startsWith","searchString","that","index","Math","min","arguments","length","undefined","search","String","slice"],"mappings":"4NAMaA,EAAN,aAgBP,SAAAC,EAAAC,GAA6B,IACnBC,EAASD,OADUE,UAAAD,KAEnBE,EAAkBH,EAFCI,YAAAD,cAI3B,OAAOF,EAAAI,QAAA,kBAAgC,SAAAC,EAAAC,GAErC,GAAIA,sBAA2BA,aAA/B,KAEE,OAAAD,EAEF,IAAME,EAA0BD,kBAAuBA,QAAvBA,GANqBA,EAWrD,eAAgBJ,EAAhBK,GAAA,UAIiBC,cACnB,SAAAA,EAAAT,GAAmB,IAAAU,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAAb,IAAAa,MACAC,MAAa,CAAEb,KAAMF,EAAYC,IAFhBU,8BAKnBK,kBAAS,IACCd,EAASY,KADVC,MAAAb,KAEP,OACEe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEC,UADF,gBAEEC,wBAAyB,CAAEC,OAAQpB,UAZJqB,IAAMC,6CCvC/C,IAAAC,EAAcC,EAAQ,IACtBC,EAAeD,EAAQ,IACvBE,EAAcF,EAAQ,KAEtBG,EAAA,cAEAJ,IAAAK,EAAAL,EAAAM,EAAgCL,EAAQ,IAARA,CAHhC,cAG4D,UAC5DM,WAAA,SAAAC,GACA,IAAAC,EAAAN,EAAAd,KAAAmB,EALA,cAMAE,EAAAR,EAAAS,KAAAC,IAAAC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAAN,EAAAK,SACAE,EAAAC,OAAAT,GACA,OAAAJ,EACAA,EAAAhB,KAAAqB,EAAAO,EAAAN,GACAD,EAAAS,MAAAR,IAAAM,EAAAF,UAAAE","file":"component---node-modules-ocular-gatsby-src-templates-doc-n-jsx-3ef889f77213b42da900.js","sourcesContent":["import React from 'react';\n\nimport { graphql } from 'gatsby';\n\n// Query for the markdown doc by slug\n// (Note: We could just search the allMarkdown from WebsiteConfig ourselves)\nexport const query = graphql`\n  query DocBySlug($slug: String!) {\n    docBySlug: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        category\n        tags\n      }\n    }\n  }\n`;\n\nfunction replaceLinks(props) {\n  const { html } = props.data.docBySlug;\n  const { relativeLinks } = props.pageContext;\n\n  return html.replace(/href=\"([^\"]+)\"/g, (link, href) => {\n    // don't rewrite external links, don't rewrite links to anchors\n    if (href.startsWith('http') || href.startsWith('#')) {\n      // TODO - we could style them differently though\n      return link;\n    }\n    const hrefWithoutLeadingSlash = href.startsWith('/') ? href.slice(1) : href;\n    // replace links to:\n    // - known physical files, either relative to this file or relative to root\n    // - known routes, either relative to the route of this page or to the home page\n    // by a link to their corresponding route, expresed relative to the home page\n    return `href=\"${relativeLinks[hrefWithoutLeadingSlash]}\"`;\n  });\n}\n\nexport default class DocTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { html: replaceLinks(props) };\n  }\n\n  render() {\n    const { html } = this.state;\n    return (\n      <div>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </div>\n    );\n  }\n}\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n"],"sourceRoot":""}